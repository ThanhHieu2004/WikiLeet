name: "WikiLeet"
description: "Automatically parse your LeetCode submissions and generate a navigatable wiki of your solutions"
author: "Zanger67"

branding:
    icon: "book-open"
    color: "yellow"

inputs:
    username:
        description: |
            'Your LeetCode username'
            'Default: Zanger'
        default: "Zanger"
    dir:
        description: |
            'The directory where your LeetCode submissions are stored'
            'relative to your repo's root (defaults to "my-submissions/")'
            'Default: my-submissions'
        default: "my-submissions/"

runs:
    using: "composite"
    steps:
        - name: Checkout the current repository content
          uses: actions/checkout@v2
          with:
              # Fetch all commits since init so we can trace each file's
              # first commit timestamp. If not for this, the date for
              # every single file will default to the most recent
              # commit date since there's nothing to trace.
              fetch-depth: 0

              # Markdown generator is found in submodule + data submodule
              submodules: "true"

        - name: Pull current version of markdown generator | Cloning if not present
          shell: bash
          run: |
              git clone --recurse-submodules https://github.com/Zanger67/Leetcode-Progress-Tracker.git '.readme_updater'

              cd .readme_updater
              echo "Initializing and updating submodules in case checkout resulted in uninitializations..."
              git submodule update --init --recursive
              git submodule update --recursive --remote
              cd ../

              # if [ -d .readme_updater/ ]; then
              #     echo "Submodule exists."
              # else
              #     echo "Submodule not found. Adding..."
              #     git submodule add https://github.com/Zanger67/Leetcode-Progress-Tracker.git '.readme_updater'
              # fi

              # echo "Initializing and updating submodules..."
              # git submodule update --init --recursive
              # git submodule update --recursive --remote

              # cd .readme_updater

              # # Present for testing branch -- unused
              # git fetch origin daily-by-official-dates
              # git checkout daily-by-official-dates

              # # Make sure current branch is the main live branch
              # git fetch origin main
              # git checkout main

              # echo "Initializing and updating submodules in case checkout resulted in uninitializations..."
              # git submodule update --init --recursive
              # git submodule update --recursive --remote
              # cd ../

        - name: Ensure my-submissions directory exists
          shell: bash
          run: |
              if [ -d my-submissions/ ]; then
                  echo "my-submissions directory found"
              else
                  echo "my-submissions directory not found. Creating..."
                  mkdir "my-submissions"
              fi

        - name: Setup python 3.10
          uses: actions/setup-python@v4
          with:
              python-version: "3.10"
              cache: "pip"

          # Dependencies for the markdown generator
        - name: Install python packages
          shell: bash
          run: |
              python -m pip install --upgrade pip
              pip install -r '.readme_updater/requirements.txt'

        - name: Execute the markdown generation python script
          shell: bash
          # -n: ignores previous .pkl stores of the modified dates (regenerate all from scratch)
          # -g: use github log history to determine creation and modification dates of files
          # -user: specify the username for the LeetCode account
          run: python '.readme_updater/main.py' -n -g -user ${{ inputs.username }} -dir ${{inputs.dir}}

          # Note: exit 0 should be redundant since this action triggers on a modification meaning
          #       at least one file edit, but might as well keep it in case of future changes
          #
          #       Only exception I can think of is if you make a change in one commit
          #       then revert it in the next
        - name: Commit updated markdown files to repo
          shell: bash
          run: |
              git config --global user.name "Zanger67/leetcode"
              git config --global user.email "Zanger67[bot]@Zanger67.github.io"
              git add -- . ':!.readme_updater'
              git commit -m 'Updated markdown files' || exit 0
              git push
